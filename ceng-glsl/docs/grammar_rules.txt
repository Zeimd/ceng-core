syntax

    * = current parsing position

    state
        <current_stack> *

    rule
        non_terminal -> <current_stack> * {peek_symbol}, stack action (N), goto action (N)

    shift
        {next token} -> state

    stack action = how many stack entries to pop from current state before pushing reduction result

    goto action = next state after inserting reduction result to stack top

------------------------------------------------------------
Root state

state 0
    translation_unit *

    rules:
        done -> translation_unit * EOF

    shift
        LAYOUT -> 1
        [CONST | ATTRIBUTE | VARYING | IN | OUT | UNIFORM] -> 14
        CENTROID -> 15

------------------------------------------------------------
Layout qualifier

state 1
    LAYOUT *

    shift
        LEFT_PAREN -> 2

state 2
    LAYOUT LEFT_PAREN *

    shift
        IDENTIFIER -> 3

state 3
    LAYOUT LEFT_PAREN IDENTIFIER *

    rules
        layout_qualifier_id -> IDENTIFIER * COMMA, pop 1, goto 6
        layout_qualifier_id -> IDENTIFIER * RIGHT_PAREN, pop 1,goto 6

    shift
        EQUAL -> 4

state 4
    LAYOUT LEFT_PAREN IDENTIFIER EQUAL *

    shift
        INTCONSTANT -> 5

state 5
    LAYOUT LEFT_PAREN IDENTIFIER EQUAL INTCONSTANT *

    rules
        layout_qualifier_id -> IDENTIFIER EQUAL INTCONSTANT, goto 6

state 6
    LAYOUT LEFT_PAREN layout_qualifier_id *

    rules
        layout_qualifier_id_list -> layout_qualifier_id, goto 7

state 7
    
    LAYOUT LEFT_PAREN layout_qualifier_id_list *

    shift
        COMMA -> 11
        RIGHT_PAREN -> 9

state 9
    LAYOUT LEFT_PAREN layout_qualifier_id_list RIGHT_PAREN

    rules
        layout_qualifier -> LAYOUT LEFT_PAREN layout_qualifier_id_list RIGHT_PAREN, goto 10

state 10
    layout_qualifier *

state 11
    
    LAYOUT LEFT_PAREN layout_qualifier_id_list COMMA *

    shift
        IDENTIFIER -> 12

state 12

    LAYOUT LEFT_PAREN layout_qualifier_id_list COMMA IDENTIFIER *

    rules
        layout_qualifier_id -> IDENTIFIER * COMMA, goto 13
        layout_qualifier_id -> IDENTIFIER * RIGHT_PAREN, goto 13

state 13

    LAYOUT LEFT_PAREN layout_qualifier_id_list COMMA layout_qualifier_id

    rules
        layout_qualifier_id_list -> layout_qualifier_id_list COMMA layout_qualifier_id, goto 7

------------------------------------------------------------
Storage qualifier


state 14
    <> [CONST | ATTRIBUTE | VARYING | IN | OUT | UNIFORM] *

    rules:
        storage_qualifier -> [CONST | ATTRIBUTE | VARYING | IN | OUT | UNIFORM] *, pop 1, goto 17

state 15
    <> CENTROID *

    shift
        [IN | OUT | VARYING] -> 16

state 16
    <> CENTROID [IN | OUT | VARYING] *

    rules:
        storage_qualifier -> CENTROID [IN | OUT | VARYING] *, pop 2, goto 17

state 17
    <> storage_qualifier *

---------------------------------------------------------------
Interpolation qualifier

state 18
    <> [SMOOTH | FLAT | NOPERSPECTIVE] *

    rules:
        interpolation_qualifier -> [SMOOTH | FLAT | NOPERSPECTIVE] *, pop 1, goto 19

state 19
    <> interpolation_qualifier *

---------------------------------------------------------------
Precision qualifier

state 20
    <> [LOWP | MEDIUMP | HIGHP] *

    rules:
        precision_qualifier -> [LOWP | MEDIUMP | HIGHP] *, pop 1, goto 21

state 21
    <> precision_qualifier *

    shift

        type_specifier_no_prec -> 38

---------------------------------------------------------------
Type qualifier

state 22
    <> storage_qualifier *

    rules:
        type_qualifier -> storage_qualifier *, pop 1, goto 23

state 23
    <> type_qualifier *

    shift:

        type_specifier -> 40

state 24
    <> layout_qualifier *

    rules
        type_qualifier -> layout_qualifier * NOT(storage_qualifier), pop 1, goto 23

    shift
        storage_qualifier -> 25

state 25
    <> layout_qualifier storage_qualifier *

    rules:
        type_qualifier -> layout_qualifier storage_qualifier *, pop 2, goto 23

state 26
    <> interpolation_qualifier *

    rules
        type_qualifier -> interpolation_qualifier * NOT(storage_qualifier), pop 1, goto 23

    shift
        storage_qualifier -> 27

state 27
    <> interpolation_qualifier storage_qualifier *

    rules:
        type_qualifier -> interpolation_qualifier storage_qualifier *, pop 2, goto 23
    
state 28
    <> INVARIANT *

    rules 
        type_qualifier -> INVARIANT * NOT(storage_qualifier | interpolation_qualifier), pop 1, goto 23

    shift
        storage_qualifier -> 29
        interpolation_qualifier -> 30

state 29
    <> INVARIANT storage_qualifier *

    rules
        type_qualifier -> INVARIANT storage_qualifier *, pop 2, goto 23

state 30
    <> INVARIANT interpolation_qualifier storage_qualifier *

    rules
        type_qualifier -> INVARIANT interpolation_qualifier storage_qualifier *, pop 3, goto 23

---------------------------------------------------------------
Type specifier, Fully qualified type

state 31
    <> TOKEN:DATA_TYPE *

    rules

        type_specifier_non_array -> TOKEN:DATA_TYPE *, pop 1, goto 32

state 32
    <> type_specifier_non_array *

    rules
        type_specifier_no_prec -> type_specifier_non_array * NOT(LEFT_BRACKET), pop 1, goto 33

    shift

        LEFT_BRACKET -> 34

state 33
    <> type_specifier_no_prec *

    rules

        type_specifier -> type_specifier_no_prec *, pop 1, goto 37

state 34
    <> type_specifier_non_array LEFT_BRACKET *

    shift

        RIGHT_BRACKET -> 35
        else -> 

state 35
    <> type_specifier_non_array LEFT_BRACKET RIGHT_BRACKET

    rules
        type_specifier_no_prec -> type_specifier_non_array LEFT_BRACKET RIGHT_BRACKET *, pop 3, goto 33

state 37
    <> type_specifier *

    rules

        fully_qualified_type -> type_specifier *, pop 1, goto 39

state 39
    <> fully_qualified_type *

    shift

        IDENTIFIER -> 41

state 38

    <> precision_qualifier type_specifier_no_prec *

    rules

        type_specifier -> precision_qualifier type_specifier_no_prec *, pop 2, goto 37

state 40
    <> type_qualifier type_specifier *

    rules
        fully_qualified_type -> type_qualifier type_specifier *, pop 2, goto 39

-------------------------------------------------------------------
Single declaration

state 41
    <> fully_qualified_type IDENTIFIER *

    rules

        single_declaration -> fully_qualified_type IDENTIFIER * NOT(LEFT_BRACKET | EQUAL), pop 2, goto 42

    shift

        LEFT_BRACKET -> 43
        EQUAL -> 45

state 42
    <> single_declaration *

    rules

        init_declarator_list -> single_declaration * NOT(COMMA), pop 1, goto 46

state 43
    <> fully_qualified_type IDENTIFIER LEFT_BRACKET *

    shift
        RIGHT_BRACKET -> 44
        else -> 

state 44
    <> fully_qualified_type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET *

    rules
        single_declaration -> fully_qualified_type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET *, pop 3, goto 42

state 45

    <> fully_qualified_type IDENTIFIER EQUAL *

    TODO: requires parsing initializer non-terminal

--------------------------------------------------------------------------
Init declarator list

state 46
    <> init_declarator_list *

    shift

        COMMA -> 47

state 47
    <> init_declarator_list COMMA *

    shift

        IDENTIFIER -> 48

state 48
    <> init_declarator_list COMMA IDENTIFIER *

    rules

        init_declarator_list -> init_declarator_list COMMA IDENTIFIER * NOT(LEFT_BRACKET | EQUAL), pop 2, goto 46

    shift

        LEFT_BRACKET -> 49
        EQUAL -> 51

state 49
    <> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET *

    shift

        RIGHT_BRACKET -> 50
        else -> TODO: requires parsing constant_expression non-terminal

state 50
    <> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET RIGHT_BRACKET *

    rules
        init_declarator_list -> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET RIGHT_BRACKET * NOT(EQUAL), pop 5, goto 46

    shift
        EQUAL -> 52
        else -> TODO: requires parsing constant_expression non-terminal

state 51
    <> init_declarator_list COMMA IDENTIFIER EQUAL *

    TODO: requires parsing initializer non-terminal

state 52
    <> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL *

    TODO: requires parsing initializer non-terminal

-------------------------------------------------------------------------------------------
Expressions

state 53
    <> IDENTIFIER *

    rules:

        variable_identifier -> IDENTIFIER *, pop 1, goto 54

state 54
    <> variable_identifier *

    rules:

        primary_expression -> variable_identifier *, pop 1, goto 55

state 55
    <> primary_expression *

    rules

        postfix_expression -> primary_expression *, pop 1, goto 58

state 56
    <> [INTCONSTANT | UINTCONSTANT | FLOATCONSTANT | BOOLCONSTANT] *

    rules

        primary_expression -> [INTCONSTANT | UINTCONSTANT | FLOATCONSTANT | BOOLCONSTANT] *, pop 1, goto 55

state 57
    <> LEFT_PAREN expression RIGHT_PAREN

    rules

        primary_expression -> LEFT_PAREN expression RIGHT_PAREN, pop 3, goto 55

state 58

    <> postfix_expression *

    rules

        unary_expression -> postfix_expression * NOT(INC_OP | DEC_OP | LEFT_BRACKET | DOT), pop 1, goto 67

    shift

        INC_OP -> 59
        DEC_OP -> 60
        LEFT_BRACKET -> 61
        DOT -> 64

state 59

    <> postfix_expression INC_OP *

    rules
        postfix_expression -> postfix_expression INC_OP *, pop 2, goto 58

state 60

    <> postfix_expression DEC_OP *

    rules
        postfix_expression -> postfix_expression DEC_OP *, pop 2, goto 58

state 61

    <> postfix_expression LEFT_BRACKET *

    shift
        TODO: requires parsing integer_expression

state 62

    <> postfix_expression LEFT_BRACKET integer_expression *

    shift
        RIGHT_BRACKET -> 63

state 63

    <> postfix_expression LEFT_BRACKET integer_expression RIGHT_BRACKET *

    rules

        postfix_expression -> postfix_expression LEFT_BRACKET integer_expression RIGHT_BRACKET *, pop 4, goto 58

state 64

    <> postfix_expression DOT *

    shift
        FIELD_SELECTION -> 65

state 65

    <> postfix_expression DOT FIELD_SELECTION *

    rules

        postfix_expression -> postfix_expression DOT FIELD_SELECTION *, pop 3, goto 58

state 66

    <> function_call *

    rules

        postfix_expression -> function_call *, pop 1, goto 58

state 67

    <> unary_expression *

    rules

        multiplicative_expression -> unary_expression * [STAR | SLASH | PERCENT], pop 1, goto 75

state 68

    <> INC_OP *

    shift

        unary_expression -> 69

state 69

    <> INC_OP unary_expression *

    rules

        unary_expression -> INC_OP unary_expression *, pop 2, goto 67

state 70

    <> DEC_OP *

    shift

        unary_expression -> 71

state 71

    <> DEC_OP unary_expression *

    rules

        unary_expression -> DEC_OP unary_expression *, pop 2, goto 67

state 72

    <> [PLUS | DASH | BANG | TILDE] *

    rules

        unary_operator -> [PLUS | DASH | BANG | TILDE] *

state 73

    <> unary_operator *

    shift

        unary_expression -> 74

state 74

    <> unary_operator unary_expression *

    rules

        unary_expression -> unary_operator unary_expression *

state 75

    <> multiplicative_expression *

    rules
        additive_expression -> multiplicative_expression * [PLUS | DASH], pop 1, goto 78

    shift

        [STAR | SLASH | PERCENT] -> 76

state 76

    <> multiplicative_expression [STAR | SLASH | PERCENT] *

    shift

        unary_expression -> 77

state 77

    <> multiplicative_expression [STAR | SLASH | PERCENT] unary_expression *

    rules

        multiplicative_expression -> multiplicative_expression [STAR | SLASH | PERCENT] unary_expression *, pop 3, goto 75

state 78

    <> additive_expression *

    rules

        shift_expression -> additive_expression * [LEFT_OP | RIGHT_OP], pop 1, goto TBA

    shift

        [PLUS | DASH] -> 79

state 79

    <> additive_expression [PLUS | DASH] *

    shift
        multiplicative_expression -> 80

state 80
    <> additive_expression [PLUS | DASH] multiplicative_expression *

    rules
        additive_expression -> multiplicative_expression [PLUS | DASH] *












